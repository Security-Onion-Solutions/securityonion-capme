Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 securityonion-capme (20121213-0ubuntu0securityonion35) trusty; urgency=medium
 .
   * package PR #13
Author: Doug Burks <doug.burks@gmail.com>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: http://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- securityonion-capme-20121213.orig/capme/.js/capme.js
+++ securityonion-capme-20121213/capme/.js/capme.js
@@ -11,27 +11,16 @@ $(document).ready(function(){
 
     var loaderImg = "<img id=loader class=loader src=\".css/load.gif\">";
     var err = 0;
-
+    
     $(".capme_body").fadeIn('slow');
 
-    // We will fire if we have enough arguments otherwise we wait for a submit
-    numArgs = parseInt($("#formargs").val());
-    gotUsr  = $("#username").val().length;
-    gotPwd  = $("#password").val().length;
-
-    if (numArgs == 8) {
-        reqCap("posted");
-    }
-
-    // Send focus to credentials if we have some args
-    if (numArgs > 1) {
-        if (gotUsr == 0) {
-            $("#username").focus();
-        } else if (gotPwd == 0) {
-            $("#password").focus();
-        } else {
-            $("#password").focus();
-        }
+    //Check if browser is Chrome/Chromium-based.  If so, hide checkboxes and placeholders.
+    var is_chrome = navigator.userAgent.toLowerCase().indexOf('chrome') > -1;
+    if (!(is_chrome)){
+       $("#stime_checkbox").hide();
+       $("#etime_checkbox").hide();
+       $("#stime").attr('placeholder', '');
+       $("#etime").attr('placeholder', '');
     }
 
     //Set tooltip for checkboxes
@@ -39,10 +28,13 @@ $(document).ready(function(){
     $("#etime_checkbox").attr("title", "Convert to date/time format");
 
     //Set checkbox value based on user input
+    //When we lose focus of start time input, set checkbox value
     $("#stime").blur(function() {
-    var stimeVal = document.getElementById("stime").value;
-    var stimeSyntax = "-";
-        if (stimeVal.indexOf(stimeSyntax) >=0){
+
+    var stimeBlur = $("#stime").val();
+    var stimeFmt = "-";
+
+        if (stimeBlur.indexOf(stimeFmt) >=0){
 	    $("#stime_checkbox").prop('checked', true);
             $("#stime_checkbox").attr("title", "Convert to epoch format");
         }
@@ -52,10 +44,13 @@ $(document).ready(function(){
 	}
     });
 
+    //When we lose focus of end time input, set checkbox value
     $("#etime").blur(function() {
-    var etimeVal = document.getElementById("etime").value;
-    var etimeSyntax = "-";
-        if (etimeVal.indexOf(etimeSyntax) >=0){
+
+    var etimeBlur = $("#etime").val();
+    var etimeFmt = "-";
+
+	if (etimeBlur.indexOf(etimeFmt) >=0){
             $("#etime_checkbox").prop('checked', true);
             $("#etime_checkbox").attr("title", "Convert to epoch format");
         }
@@ -69,23 +64,21 @@ $(document).ready(function(){
     $("#stime_checkbox").click(function() {
 
 	if ($("#stime_checkbox").prop("checked")){
-
             //Get value of start time from input and convert it to human-readable date/time
-            var stimeVal = document.getElementById("stime").value;
-            var stime_to_ISO = new Date(stimeVal*1000).toISOString().slice(0,-5).replace('T',' ');
+            var stimeChkd = $("#stime").val();
+            var stime_to_ISO = new Date(stimeChkd*1000).toISOString().slice(0,-5).replace('T',' ');
 
-            document.getElementById("stime").value = stime_to_ISO;
+            $("#stime").val(stime_to_ISO);
 	    $("#stime_checkbox").attr("title", "Convert to epoch format");
 	}
 	else{
-
             //Get start time and convert it to epoch timestamp
-            var stimeVal = document.getElementById("stime").value;
-            var startDate = new Date(stimeVal);
+            var stimeUnChkd = $("#stime").val();
+            var startDate = new Date(stimeUnChkd);
             var start_tz_offset = (startDate.getTimezoneOffset());
             var stimeConverted = startDate.setTime( startDate.getTime()/1000-(start_tz_offset*60) );
 
-            document.getElementById("stime").value = stimeConverted;
+            $("#stime").val(stimeConverted);
             $("#stime_checkbox").attr("title", "Convert to date/time format");
         }
     });
@@ -94,56 +87,76 @@ $(document).ready(function(){
     $("#etime_checkbox").click(function() {
 
 	if ($("#etime_checkbox").prop("checked")){
-
 	    //Get value of start time from input and convert it to human-readable date/time
-            var stimeVal = document.getElementById("etime").value;
-            var stime_to_ISO = new Date(stimeVal*1000).toISOString().slice(0,-5).replace('T',' ');
+            var etimeChkd = $("#etime").val();
+            var etime_to_ISO = new Date(etimeChkd*1000).toISOString().slice(0,-5).replace('T',' ');
 
-            document.getElementById("etime").value = stime_to_ISO;
+            $("#etime").val(etime_to_ISO);
             $("#etime_checkbox").attr("title", "Convert to epoch format");
         }
 	else{
-
 	    //Get start time and convert it to epoch timestamp
-            var stimeVal = document.getElementById("etime").value;
-            var startDate = new Date(stimeVal);
-            var start_tz_offset = (startDate.getTimezoneOffset());
-            var stimeConverted = startDate.setTime( startDate.getTime()/1000-(start_tz_offset*60) );
+            var etimeUnChkd = $("#etime").val();
+            var endDate = new Date(etimeUnChkd);
+            var end_tz_offset = (endDate.getTimezoneOffset());
+            var etimeConverted = endDate.setTime( endDate.getTime()/1000-(end_tz_offset*60) );
 
-	    document.getElementById("etime").value = stimeConverted;
-                $("#etime_checkbox").attr("title", "Convert to date/time format");
+	    $("#etime").val(etimeConverted);
+            $("#etime_checkbox").attr("title", "Convert to date/time format");
         }
     });
 
+    // We will fire if we have enough arguments otherwise we wait for a submit
+    numArgs = parseInt($("#formargs").val());
+    gotUsr  = $("#username").val().length;
+    gotPwd  = $("#password").val().length;
+
+    if (numArgs == 8) {
+        reqCap("posted");
+    }
+
+    // Send focus to credentials if we have some args
+    if (numArgs > 1) {
+        if (gotUsr == 0) {
+            $("#username").focus();
+        } else if (gotPwd == 0) {
+            $("#password").focus();
+        } else {
+            $("#password").focus();
+        }
+    }
+
+    //Submit form
     $(".capme_submit").click(function() {
 
+	$("#stime_checkbox").prop('checked', false);
+        $("#etime_checkbox").prop('checked', false);
+
         //Get start time value
-        var stimeVal = document.getElementById("stime").value;
+        var stime = $("#stime").val();
         var stimeSyntax = ":";
 
         //If start time value contains stimeSyntax, then convert date to epoch timestamp.
-        if (stimeVal.indexOf(stimeSyntax) >=0) {
-
-            var startDate = new Date(stimeVal);
+        if (stime.indexOf(stimeSyntax) >=0) {
+	    var startDate = new Date(stime);
             var start_tz_offset = (startDate.getTimezoneOffset());
             var stimeConverted = startDate.setTime( startDate.getTime()/1000-(start_tz_offset*60) );
 
-            document.getElementById("stime").value = stimeConverted;
+            $("#stime").val(stimeConverted);
         }
 
         //Get end time value
-        var etimeVal = document.getElementById("etime").value;
+        var etime = $("#etime").val();
         var etimeSyntax = ":";
 
         //If end time value contains etimeSyntax, then convert date to epoch timestamp.
-        if (etimeVal.indexOf(etimeSyntax) >=0) {
-
-            var endDate = new Date(etimeVal);
+        if (etime.indexOf(etimeSyntax) >=0) {
+	    var endDate = new Date(etime);
             var end_tz_offset = (endDate.getTimezoneOffset());
             var etimeConverted = endDate.setTime( endDate.getTime()/1000-(end_tz_offset*60) );
 
-            document.getElementById("etime").value = etimeConverted;
-        }
+	    $("#etime").val(etimeConverted);
+	}
 
        frmArgs = $('input[value!=""]').length;
        if (frmArgs == 17) {
@@ -303,7 +316,6 @@ $(document).ready(function(){
             n++;
             var unixTime = parseInt(stamp)
         }
-
         if (n == 0) {
             theMsg("Error: Bad Timestamp");
             bON('.capme_submit');
