Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 securityonion-capme (20121213-0ubuntu0securityonion44) trusty; urgency=medium
 .
   * Issue 493: CapMe: send credentials interactively to avoid exposing on command line
Author: Doug Burks <doug.burks@gmail.com>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: http://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- securityonion-capme-20121213.orig/capme/.inc/callback.php
+++ securityonion-capme-20121213/capme/.inc/callback.php
@@ -30,6 +30,26 @@ function invalid($string) {
 	exit;
 }
 
+function cliscript($cmd, $pwd) {
+    $descspec = array(
+                 0 => array("pipe", "r"),
+                 1 => array("pipe", "w"),
+                 2 => array("pipe", "w")
+    );
+    $proc = proc_open($cmd, $descspec, $pipes);
+    $debug = "Process execution failed";
+    $_raw = "";
+    if (is_resource($proc)) {
+        fwrite($pipes[0], $pwd);
+        fclose($pipes[0]);
+        $_raw = stream_get_contents($pipes[1]);
+        fclose($pipes[1]);
+        $debug = fgets($pipes[2]);
+        fclose($pipes[2]);
+    }
+    return explode("\n", $_raw);
+}
+
 // Validate user input - source IP address
 $sip	= h2s($d[0]);
 if (!filter_var($sip, FILTER_VALIDATE_IP)) {
@@ -274,10 +294,8 @@ if ($err == 1) {
     if ($xscript == "bro") {
 	$script = "cliscriptbro.tcl";
     }
-    $cmd = "$script -sid $sid -sensor '$sensor' -timestamp '$st' -u '$usr' -pw '$pwd' -sip $sip -spt $spt -dip $dip -dpt $dpt";
-
-    // Request pcap/transcript.
-    exec("../.scripts/$cmd",$raw);
+    $cmd = "../.scripts/$script \"$usr\" \"$sensor\" \"$st\" $sid $sip $dip $spt $dpt";
+    $raw = cliscript($cmd, $pwd);
     $time2 = microtime(true);
 
     // Check for error
@@ -302,15 +320,14 @@ if ($err == 1) {
 
     // If we found gzip encoding, then request Bro transcript.
     if ($foundgzip==1) {
-	$script = "cliscriptbro.tcl";
-	$cmd = "$script -sid $sid -sensor '$sensor' -timestamp '$st' -u '$usr' -pw '$pwd' -sip $sip -spt $spt -dip $dip -dpt $dpt";
+    	$cmd = "../.scripts/cliscriptbro.tcl \"$usr\" \"$sensor\" \"$st\" $sid $sip $dip $spt $dpt";
 	$fmtd .= "<span class=txtext_hdr>CAPME: <b>Detected gzip encoding.</b></span>";
 	$fmtd .= "<span class=txtext_hdr>CAPME: <b>Automatically switched to Bro transcript.</b></span>";
     }
 
     // Request pcap/transcript.
     // Always request pcap a second time to ensure consistent DEBUG output.
-    exec("../.scripts/$cmd",$raw);
+    $raw = cliscript($cmd, $pwd);
     $time4 = microtime(true);
 
     // To handle large pcaps more gracefully, we only render the first $maxtranscriptbytes.
@@ -391,8 +408,7 @@ if ($err == 1) {
     $debug .= "<span class=txtext_qry>QUERY: " . $queries[$sidsrc] . "</span>";
     $time5 = microtime(true);
     $debug .= "<span class=txtext_dbg>CAPME: Processed transcript in " . number_format(($time5 - $time0), 2) . " seconds.</span><br>";
-    // Detailed timers for each part of the process
-    // $fmtd .= "CAPME: ($time1 - $time0) . " " . ($time2 - $time1) . " " . ($time3 - $time2) . " " . ($time4 - $time3) . " " . ($time5 - $time4) . "<br>";
+    $debug .= "<span class=txtext_dbg>CAPME: " . ($time1 - $time0) . " " . ($time2 - $time1) . " " . ($time3 - $time2) . " " . ($time4 - $time3) . " " . ($time5 - $time4) . "</span><br>";
 
     // If we exceeded $maxtranscriptbytes, notify the user and recommend downloading the pcap.
     if ($transcriptbytes > $maxtranscriptbytes) {
--- securityonion-capme-20121213.orig/capme/.inc/config.php
+++ securityonion-capme-20121213/capme/.inc/config.php
@@ -4,4 +4,11 @@ $dbHost = '127.0.0.1';
 $dbName = 'securityonion_db';
 $dbUser = 'readonly';
 $dbPass = 'securityonion';
+
+// Sguild Info
+
+$sgVer  = "SGUIL-0.9.0 OPENSSL ENABLED";
+$sgHost = "127.0.0.1";
+$sgPort = "7734";
+
 ?>
--- securityonion-capme-20121213.orig/capme/.inc/config.php.sample
+++ securityonion-capme-20121213/capme/.inc/config.php.sample
@@ -1,7 +1,14 @@
 <?php
 // DB Info.
-$dbHost = '10.13.1.226';
-$dbName = 'sguildb';
+$dbHost = '127.0.0.1';
+$dbName = 'securityonion_db';
 $dbUser = 'readonly';
-$dbPass = 'readonly';
+$dbPass = 'securityonion';
+
+// Sguild Info
+
+$sgVer  = "SGUIL-0.9.0 OPENSSL ENABLED";
+$sgHost = "127.0.0.1";
+$sgPort = "7734";
+
 ?>
--- securityonion-capme-20121213.orig/capme/.scripts/cliscript.tcl
+++ securityonion-capme-20121213/capme/.scripts/cliscript.tcl
@@ -14,105 +14,48 @@
 
 ########################## GLOBALS ##################################
 
-set VERSION "SGUIL-0.9.0 OPENSSL ENABLED"
-set SERVER 127.0.0.1
-set PORT 7734
-
-# Comment out the following 2 lines if 
-# you wish to be prompted for a user/pass
-
-#set USERNAME "beta"
-#set PASSWD "band"
-
-#########################################################################
-# Get cmd line args
-#########################################################################
-
-proc DisplayUsage { cmdName } {
-
-    puts "Usage: $cmdName \[-s <server>\] \[-p <port>\] \[-u <username>\]"
-    puts "  \[-o <filename>\] \[-sensor <sensorname>\] \[-timestamp  <timestamp>\]"
-    puts "  \[-sid <sensorid>\] \[-sip <sip>\] \[-dip <dip>\]"
-    puts "  \[-spt <spt>\] \[-dpt <dpt>\]\n"
-    puts "  -s         <servername>: Hostname of sguild server."
-    puts "  -p         <port>: Port of sguild server."
-    puts "  -u         <username>: Username to connect as."
-    puts "  -pw        <password>: Password to connect with."
-    puts "  -o         <filename>: PATH to tls libraries if needed."
-    puts "  -sensor    <sensorname>: The sensor name."
-    puts "  -timestamp <\"timestamp\">: Event timestamp. e.g.: \"2012-08-18 16:28:00\""
-    puts "  -sid       <sensorid>: The sensor ID."
-    puts "  -sip       <sip>: Source IP."
-    puts "  -dip       <dip>: Destination IP."
-    puts "  -spt       <spt>: Source port."
-    puts "  -dpt       <dpt>: Destination port.\n"
-    exit 1
-
+### Load extended tcl
+if [catch {package require Tclx} tclxVersion] {
+    puts "Error: Package TclX not found"
+    exit
 }
 
-set state flag
-
-foreach arg $argv {
-
-    switch -- $state {
-
-        flag {
-            switch -glob -- $arg {
-                -s { set state server }
-                -p { set state port }
-                -u { set state username }
-                -pw { set state password }
-                -o { set state openssl }
-                -sensor { set state sensorname }
-                -timestamp { set state timestamp }
-                -sid { set state sensorid }
-                -sip { set state sip }
-                -dip { set state dip }
-                -spt { set state spt }
-                -dpt { set state dpt }
-                default { DisplayUsage $argv0 }
-            }
+set CONFIG "../.inc/config.php"
+if {[file exists $CONFIG]} {
+    for_file line $CONFIG {
+        if { [regexp {^\$([^\s]+)\s+=\s+['"]([^'"]+)['"]} $line match theVar theVal] } {
+            set configArray($theVar) $theVal
         }
-
-        server { set SERVER $arg; set state flag }
-        port { set PORT $arg; set state flag }
-        username { set USERNAME $arg; set state flag }
-        password { set PASSWD $arg; set state flag }
-        openssl { set TLS_PATH $arg; set state flag }
-        sensorname { set SENSORNAME $arg; set state flag }
-        timestamp { set TIMESTAMP $arg; set state flag }
-        sensorid { set SENSORID $arg; set state flag }
-        sip { set SRCIP $arg; set state flag }
-        dip { set DSTIP $arg; set state flag }
-        spt { set SRCPORT $arg; set state flag }
-        dpt { set DSTPORT $arg; set state flag }
-        default { DisplayUsage $argv0 }
-
     }
-
+    set VERSION  $configArray(sgVer)
+    set SERVER   $configArray(sgHost)
+    set PORT     $configArray(sgPort)
+} else {
+    puts "I could not find a confguration file"
+    exit 1
 }
 
-# Check if we got all of our arguments
+if { $argc == 8 } {
+    set USR [lindex $argv 0]
+    set SEN [lindex $argv 1]
+    set TS  [lindex $argv 2]
+    set SID [lindex $argv 3]
+    set SIP [lindex $argv 4]
+    set DIP [lindex $argv 5]
+    set SPT [lindex $argv 6]
+    set DPT [lindex $argv 7]
+} else {
+    puts "ERROR: Not enough arguments"
+    exit 1
+}
 
-if { [catch {set eventInfo "$SENSORNAME \"$TIMESTAMP\" $SENSORID $SRCIP $DSTIP $SRCPORT $DSTPORT"}] } {
-    DisplayUsage $argv0
-} 
+set eventInfo "\"$SEN\" \"$TS\" $SID $SIP $DIP $SPT $DPT"
 
 # Now verify
+if { ![regexp -expanded { ^\".+\"\s\"\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}\:\d{2}\"\s\d+\s\d+\.\d+\.\d+\.\d+\s\d+\.\d+\.\d+\.\d+\s\d+\s\d+$ } $eventInfo match] } {
 
-if { [regexp -expanded {
-
-            ^.+\s
-            \"\d\d\d\d-\d\d-\d\d\s\d\d:\d\d:\d\d\"\s
-            \d+\s
-            \d+\.\d+\.\d+\.\d+\s
-            \d+\.\d+\.\d+\.\d+\s
-            \d+\s
-            \d+$ } $eventInfo match] } {
-
-} else {
-
-    DisplayUsage $argv0
+    puts "ERROR: Arguments failed logic tests"
+    exit 1
 
 }
 
@@ -219,7 +162,7 @@ if { $serverVersion != $VERSION } {
 SendToSguild $socketID [list VersionInfo $VERSION]
 
 # SSL-ify the socket
-if { [catch {tls::import $socketID -ssl2 false -ssl3 false -tls1 true} tlsError] } { 
+if { [catch {tls::import $socketID -ssl2 false -ssl3 false -tls1 true } tlsError] } { 
 
     puts "ERROR: $tlsError"
     exit 1
@@ -227,7 +170,7 @@ if { [catch {tls::import $socketID -ssl2
 }
 
 # Give SSL a sec
-# after 1000
+after 1000
 
 # Send sguild a ping to confirm comms
 SendToSguild $socketID "PING"
@@ -238,28 +181,11 @@ set INIT [gets $socketID]
 # Auth starts here
 #
 
-# Get username if not provided at cmd line
-if { ![info exists USERNAME] } {
-
-    puts -nonewline "Enter username: "
-    flush stdout
-    set USERNAME [gets stdin]
-
-}
-
 # Get users password
-if { ![info exists PASSWD] } {
-    puts -nonewline "Enter password: "
-    flush stdout
-    exec stty -echo
-    set PASSWD [gets stdin]
-    exec stty echo
-    flush stdout
-    puts ""
-}
+set PWD [gets stdin]
 
 # Authenticate with sguild
-SendToSguild $socketID [list ValidateUser $USERNAME $PASSWD]
+SendToSguild $socketID [list ValidateUser $USR $PWD]
 
 # Get the response. Success will return the users ID and failure will send INVALID.
 if { [catch {gets $socketID} authMsg] } { 
@@ -287,7 +213,7 @@ set SESSION_STATE DEBUG
 
 while { 1 } {
 
-    if { [eof $socketID] } { puts "ERROR: Lost connection to server."; exit 1 }
+    if { [eof $socketID] } { puts "ERROR: Lost connection to server."; exit 1; }
 
     if { [catch {gets $socketID} msg] } {
 
@@ -299,7 +225,6 @@ while { 1 } {
     # Strip the command and faux winname from the msg
     set data [lindex $msg 2]
 
-
     switch -exact -- $data {
 
         HDR     { set SESSION_STATE HDR }
--- securityonion-capme-20121213.orig/capme/.scripts/cliscriptbro.tcl
+++ securityonion-capme-20121213/capme/.scripts/cliscriptbro.tcl
@@ -14,105 +14,48 @@
 
 ########################## GLOBALS ##################################
 
-set VERSION "SGUIL-0.9.0 OPENSSL ENABLED"
-set SERVER 127.0.0.1
-set PORT 7734
-
-# Comment out the following 2 lines if 
-# you wish to be prompted for a user/pass
-
-#set USERNAME "beta"
-#set PASSWD "band"
-
-#########################################################################
-# Get cmd line args
-#########################################################################
-
-proc DisplayUsage { cmdName } {
-
-    puts "Usage: $cmdName \[-s <server>\] \[-p <port>\] \[-u <username>\]"
-    puts "  \[-o <filename>\] \[-sensor <sensorname>\] \[-timestamp  <timestamp>\]"
-    puts "  \[-sid <sensorid>\] \[-sip <sip>\] \[-dip <dip>\]"
-    puts "  \[-spt <spt>\] \[-dpt <dpt>\]\n"
-    puts "  -s         <servername>: Hostname of sguild server."
-    puts "  -p         <port>: Port of sguild server."
-    puts "  -u         <username>: Username to connect as."
-    puts "  -pw        <password>: Password to connect with."
-    puts "  -o         <filename>: PATH to tls libraries if needed."
-    puts "  -sensor    <sensorname>: The sensor name."
-    puts "  -timestamp <\"timestamp\">: Event timestamp. e.g.: \"2012-08-18 16:28:00\""
-    puts "  -sid       <sensorid>: The sensor ID."
-    puts "  -sip       <sip>: Source IP."
-    puts "  -dip       <dip>: Destination IP."
-    puts "  -spt       <spt>: Source port."
-    puts "  -dpt       <dpt>: Destination port.\n"
-    exit 1
-
+### Load extended tcl
+if [catch {package require Tclx} tclxVersion] {
+    puts "Error: Package TclX not found"
+    exit
 }
 
-set state flag
-
-foreach arg $argv {
-
-    switch -- $state {
-
-        flag {
-            switch -glob -- $arg {
-                -s { set state server }
-                -p { set state port }
-                -u { set state username }
-                -pw { set state password }
-                -o { set state openssl }
-                -sensor { set state sensorname }
-                -timestamp { set state timestamp }
-                -sid { set state sensorid }
-                -sip { set state sip }
-                -dip { set state dip }
-                -spt { set state spt }
-                -dpt { set state dpt }
-                default { DisplayUsage $argv0 }
-            }
+set CONFIG "../.inc/config.php"
+if {[file exists $CONFIG]} {
+    for_file line $CONFIG {
+        if { [regexp {^\$([^\s]+)\s+=\s+['"]([^'"]+)['"]} $line match theVar theVal] } {
+            set configArray($theVar) $theVal
         }
-
-        server { set SERVER $arg; set state flag }
-        port { set PORT $arg; set state flag }
-        username { set USERNAME $arg; set state flag }
-        password { set PASSWD $arg; set state flag }
-        openssl { set TLS_PATH $arg; set state flag }
-        sensorname { set SENSORNAME $arg; set state flag }
-        timestamp { set TIMESTAMP $arg; set state flag }
-        sensorid { set SENSORID $arg; set state flag }
-        sip { set SRCIP $arg; set state flag }
-        dip { set DSTIP $arg; set state flag }
-        spt { set SRCPORT $arg; set state flag }
-        dpt { set DSTPORT $arg; set state flag }
-        default { DisplayUsage $argv0 }
-
     }
-
+    set VERSION  $configArray(sgVer)
+    set SERVER   $configArray(sgHost)
+    set PORT     $configArray(sgPort)
+} else {
+    puts "I could not find a confguration file"
+    exit 1
 }
 
-# Check if we got all of our arguments
+if { $argc == 8 } {
+    set USR [lindex $argv 0]
+    set SEN [lindex $argv 1]
+    set TS  [lindex $argv 2]
+    set SID [lindex $argv 3]
+    set SIP [lindex $argv 4]
+    set DIP [lindex $argv 5]
+    set SPT [lindex $argv 6]
+    set DPT [lindex $argv 7]
+} else {
+    puts "ERROR: Not enough arguments"
+    exit 1
+}
 
-if { [catch {set eventInfo "$SENSORNAME \"$TIMESTAMP\" $SENSORID $SRCIP $DSTIP $SRCPORT $DSTPORT"}] } {
-    DisplayUsage $argv0
-} 
+set eventInfo "\"$SEN\" \"$TS\" $SID $SIP $DIP $SPT $DPT"
 
 # Now verify
+if { ![regexp -expanded { ^\".+\"\s\"\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}\:\d{2}\"\s\d+\s\d+\.\d+\.\d+\.\d+\s\d+\.\d+\.\d+\.\d+\s\d+\s\d+$ } $eventInfo match] } {
 
-if { [regexp -expanded {
-
-            ^.+\s
-            \"\d\d\d\d-\d\d-\d\d\s\d\d:\d\d:\d\d\"\s
-            \d+\s
-            \d+\.\d+\.\d+\.\d+\s
-            \d+\.\d+\.\d+\.\d+\s
-            \d+\s
-            \d+$ } $eventInfo match] } {
-
-} else {
-
-    DisplayUsage $argv0
+    puts "ERROR: Arguments failed logic tests"
+    exit 1
 
 }
 
@@ -219,7 +162,7 @@ if { $serverVersion != $VERSION } {
 SendToSguild $socketID [list VersionInfo $VERSION]
 
 # SSL-ify the socket
-if { [catch {tls::import $socketID -ssl2 false -ssl3 false -tls1 true} tlsError] } { 
+if { [catch {tls::import $socketID -ssl2 false -ssl3 false -tls1 true } tlsError] } { 
 
     puts "ERROR: $tlsError"
     exit 1
@@ -227,7 +170,7 @@ if { [catch {tls::import $socketID -ssl2
 }
 
 # Give SSL a sec
-# after 1000
+after 1000
 
 # Send sguild a ping to confirm comms
 SendToSguild $socketID "PING"
@@ -238,28 +181,11 @@ set INIT [gets $socketID]
 # Auth starts here
 #
 
-# Get username if not provided at cmd line
-if { ![info exists USERNAME] } {
-
-    puts -nonewline "Enter username: "
-    flush stdout
-    set USERNAME [gets stdin]
-
-}
-
 # Get users password
-if { ![info exists PASSWD] } {
-    puts -nonewline "Enter password: "
-    flush stdout
-    exec stty -echo
-    set PASSWD [gets stdin]
-    exec stty echo
-    flush stdout
-    puts ""
-}
+set PWD [gets stdin]
 
 # Authenticate with sguild
-SendToSguild $socketID [list ValidateUser $USERNAME $PASSWD]
+SendToSguild $socketID [list ValidateUser $USR $PWD]
 
 # Get the response. Success will return the users ID and failure will send INVALID.
 if { [catch {gets $socketID} authMsg] } { 
@@ -287,7 +213,7 @@ set SESSION_STATE DEBUG
 
 while { 1 } {
 
-    if { [eof $socketID] } { puts "ERROR: Lost connection to server."; exit 1 }
+    if { [eof $socketID] } { puts "ERROR: Lost connection to server."; exit 1; }
 
     if { [catch {gets $socketID} msg] } {
 
@@ -299,7 +225,6 @@ while { 1 } {
     # Strip the command and faux winname from the msg
     set data [lindex $msg 2]
 
-
     switch -exact -- $data {
 
         HDR     { set SESSION_STATE HDR }
