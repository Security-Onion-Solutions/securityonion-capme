Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 securityonion-capme (20121213-0ubuntu0securityonion7) precise; urgency=low
 .
   * revert transcript to tcpflow rendering and add a separate bro option
Author: Doug Burks <doug.burks@gmail.com>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: http://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- securityonion-capme-20121213.orig/capme/index.php
+++ securityonion-capme-20121213/capme/index.php
@@ -4,7 +4,7 @@ include '.inc/functions.php';
 $s = 0;
 
 // Argument defaults
-$sip = $spt = $dip = $dpt = $stime = $etime = $usr = $pwd = $sancp = $event = $elsa = '';
+$sip = $spt = $dip = $dpt = $stime = $etime = $usr = $pwd = $sancp = $event = $elsa = $bro = $tcpflow = '';
 // Grab any arguments provided in URI
 if (isset($_REQUEST['sip']))      { $sip    = $_REQUEST['sip'];      $s++; }
 if (isset($_REQUEST['spt']))      { $spt    = $_REQUEST['spt'];      $s++; }
@@ -21,11 +21,12 @@ if (isset($_REQUEST['password'])) { $pwd
 // If all else fails, query sancp.
 if (isset($_REQUEST['filename'])) { 
     $event = " checked";
-} elseif (strpos($_SERVER['HTTP_REFERER'],":3154") !== false) {
+} elseif ( isset($_SERVER['HTTP_REFERER']) && (strpos($_SERVER['HTTP_REFERER'],":3154") !== false)) {
     $elsa  = " checked";
 } else {
     $sancp = " checked";
 }
+$tcpflow = " checked";
 ?>
 
 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
@@ -98,6 +99,14 @@ capME!
 </td>
 </tr>
 
+<tr>
+<td class=capme_left>Transcript:</td>
+<td class=capme_right>
+<input type=radio name=xscript class=capme_rad value="tcpflow"<?php echo $tcpflow;?>>tcpflow
+<input type=radio name=xscript class=capme_rad value="bro"<?php echo $bro;?>>bro
+</td>
+</tr>
+
 <tr>
 <td colspan=2 class=capme_msg_cont>
 <span class=capme_msg></span>
--- securityonion-capme-20121213.orig/capme/.inc/callback.php
+++ securityonion-capme-20121213/capme/.inc/callback.php
@@ -19,6 +19,7 @@ $et_unix= $d[5];
 $usr	= h2s($d[6]);
 $pwd	= h2s($d[7]);
 $sidsrc = h2s($d[8]);
+$xscript = h2s($d[9]);
 
 // Format timestamps
 $st = date("Y-m-d H:i:s", $st_unix);
@@ -128,8 +129,12 @@ if ($err == 1) {
 
 } else {
 
-    // We have all the data we need, so pass the parameters to cliscript
-    $cmd = "cliscript.tcl -sid $sid -sensor '$sensor' -timestamp '$st' -u '$usr' -pw '$pwd' -sip $sip -spt $spt -dip $dip -dpt $dpt";
+    // We have all the data we need, so pass the parameters to the correct cliscript
+    $script = "cliscript.tcl";
+    if ($xscript == "bro") {
+	$script = "cliscriptbro.tcl";
+    }
+    $cmd = "$script -sid $sid -sensor '$sensor' -timestamp '$st' -u '$usr' -pw '$pwd' -sip $sip -spt $spt -dip $dip -dpt $dpt";
 
     exec("../.scripts/$cmd",$raw);
 
--- /dev/null
+++ securityonion-capme-20121213/capme/.scripts/cliscriptbro.tcl
@@ -0,0 +1,322 @@
+#!/usr/bin/tclsh
+
+# cliscript.tcl - Based on "quickscript.tcl"
+# Portions Copyright (C) 2012 Paul Halliday <paul.halliday@gmail.com>
+
+# Copyright (C) 2002-2006 Robert (Bamm) Visscher <bamm@sguil.net>
+#
+# This program is distributed under the terms of version 1.0 of the
+# Q Public License.  See LICENSE.QPL for further details.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+
+########################## GLOBALS ##################################
+
+set VERSION "SGUIL-0.8.0 OPENSSL ENABLED"
+set SERVER 127.0.0.1
+set PORT 7734
+
+# Comment out the following 2 lines if 
+# you wish to be prompted for a user/pass
+
+#set USERNAME "beta"
+#set PASSWD "band"
+
+#########################################################################
+# Get cmd line args
+#########################################################################
+
+proc DisplayUsage { cmdName } {
+
+    puts "Usage: $cmdName \[-s <server>\] \[-p <port>\] \[-u <username>\]"
+    puts "  \[-o <filename>\] \[-sensor <sensorname>\] \[-timestamp  <timestamp>\]"
+    puts "  \[-sid <sensorid>\] \[-sip <sip>\] \[-dip <dip>\]"
+    puts "  \[-spt <spt>\] \[-dpt <dpt>\]\n"
+    puts "  -s         <servername>: Hostname of sguild server."
+    puts "  -p         <port>: Port of sguild server."
+    puts "  -u         <username>: Username to connect as."
+    puts "  -pw        <password>: Password to connect with."
+    puts "  -o         <filename>: PATH to tls libraries if needed."
+    puts "  -sensor    <sensorname>: The sensor name."
+    puts "  -timestamp <\"timestamp\">: Event timestamp. e.g.: \"2012-08-18 16:28:00\""
+    puts "  -sid       <sensorid>: The sensor ID."
+    puts "  -sip       <sip>: Source IP."
+    puts "  -dip       <dip>: Destination IP."
+    puts "  -spt       <spt>: Source port."
+    puts "  -dpt       <dpt>: Destination port.\n"
+    exit 1
+
+}
+
+set state flag
+
+foreach arg $argv {
+
+    switch -- $state {
+
+        flag {
+            switch -glob -- $arg {
+                -s { set state server }
+                -p { set state port }
+                -u { set state username }
+                -pw { set state password }
+                -o { set state openssl }
+                -sensor { set state sensorname }
+                -timestamp { set state timestamp }
+                -sid { set state sensorid }
+                -sip { set state sip }
+                -dip { set state dip }
+                -spt { set state spt }
+                -dpt { set state dpt }
+                default { DisplayUsage $argv0 }
+            }
+        }
+
+        server { set SERVER $arg; set state flag }
+        port { set PORT $arg; set state flag }
+        username { set USERNAME $arg; set state flag }
+        password { set PASSWD $arg; set state flag }
+        openssl { set TLS_PATH $arg; set state flag }
+        sensorname { set SENSORNAME $arg; set state flag }
+        timestamp { set TIMESTAMP $arg; set state flag }
+        sensorid { set SENSORID $arg; set state flag }
+        sip { set SRCIP $arg; set state flag }
+        dip { set DSTIP $arg; set state flag }
+        spt { set SRCPORT $arg; set state flag }
+        dpt { set DSTPORT $arg; set state flag }
+        default { DisplayUsage $argv0 }
+
+    }
+
+}
+
+# Check if we got all of our arguments
+
+if { [catch {set eventInfo "$SENSORNAME \"$TIMESTAMP\" $SENSORID $SRCIP $DSTIP $SRCPORT $DSTPORT"}] } {
+    DisplayUsage $argv0
+} 
+
+# Now verify
+
+if { [regexp -expanded {
+
+            ^.+\s
+            \"\d\d\d\d-\d\d-\d\d\s\d\d:\d\d:\d\d\"\s
+            \d+\s
+            \d+\.\d+\.\d+\.\d+\s
+            \d+\.\d+\.\d+\.\d+\s
+            \d+\s
+            \d+$ } $eventInfo match] } {
+
+} else {
+
+    DisplayUsage $argv0
+
+}
+
+#########################################################################
+# Package/Extension Requirements
+#########################################################################
+
+# Check to see if a path to the tls libs was provided
+if { [info exists TLS_PATH] } {
+
+    if [catch {load $TLS_PATH} tlsError] {
+
+        puts "ERROR: Unable to load tls libs ($TLS_PATH): $tlsError"
+        DisplayUsage $argv0
+
+    }
+
+}
+
+if { [catch {package require tls} tlsError] } {
+
+    puts "ERROR: The tcl tls package does NOT appear to be installed on this sysem."
+    puts "Please see http://tls.sourceforge.net/ for more info."
+    exit 1
+
+}
+
+
+#########################################################################
+# Procs 
+#########################################################################
+
+# A simple proc to send commands to sguild and catch errors
+proc SendToSguild { socketID message } {
+
+    if { [catch {puts $socketID $message} sendError] } {
+
+        # Send failed. Close the socket and exit.
+        catch {close $socketID} closeError
+
+        if { [info exists sendError] } { 
+
+            puts "ERROR: Caught exception while sending data: $sendError"
+
+        } else {
+
+            puts "ERROR: Caught unknown exception"
+
+        }
+
+        exit 1
+
+    }
+
+}
+
+#########################################################################
+# Main
+#########################################################################
+
+flush stdout
+
+# Try to connect to sguild
+if [catch {socket $SERVER $PORT} socketID ] {
+
+    # Exit on fail.
+    puts "ERROR: Connection failed"
+    exit 1
+
+}
+
+# Successfully connected
+fconfigure $socketID -buffering line
+
+# Check version compatibality
+if [catch {gets $socketID} serverVersion] {
+
+    # Caught an unknown error
+    puts "ERROR: $serverVersion"
+    catch {close $socketID}
+    exit 1
+
+}
+
+if { $serverVersion == "Connection Refused." } {
+
+    # Connection refused error
+    puts "ERROR: $serverVersion"
+    catch {close $socketID}
+    exit 1
+
+} 
+
+if { $serverVersion != $VERSION } {
+
+    # Mismatched versions
+    catch {close $socketID}
+    puts "ERROR: Mismatched versions.\nSERVER= ($serverVersion)\nCLIENT= ($VERSION)"
+    exit 1
+
+}
+
+# Send the server our version info
+SendToSguild $socketID [list VersionInfo $VERSION]
+
+# SSL-ify the socket
+if { [catch {tls::import $socketID} tlsError] } { 
+
+    puts "ERROR: $tlsError"
+    exit 1
+
+}
+
+# Give SSL a sec
+# after 1000
+
+# Send sguild a ping to confirm comms
+SendToSguild $socketID "PING"
+# Get the PONG
+set INIT [gets $socketID]
+
+#
+# Auth starts here
+#
+
+# Get username if not provided at cmd line
+if { ![info exists USERNAME] } {
+
+    puts -nonewline "Enter username: "
+    flush stdout
+    set USERNAME [gets stdin]
+
+}
+
+# Get users password
+if { ![info exists PASSWD] } {
+    puts -nonewline "Enter password: "
+    flush stdout
+    exec stty -echo
+    set PASSWD [gets stdin]
+    exec stty echo
+    flush stdout
+    puts ""
+}
+
+# Authenticate with sguild
+SendToSguild $socketID [list ValidateUser $USERNAME $PASSWD]
+
+# Get the response. Success will return the users ID and failure will send INVALID.
+if { [catch {gets $socketID} authMsg] } { 
+
+    puts "ERROR: $authMsg"
+    exit 1
+
+}
+
+set authResults [lindex $authMsg 1]
+if { $authResults == "INVALID" } { 
+
+    puts "ERROR: Authentication failed."
+    exit 1
+
+}
+
+# Send info to Sguild
+SendToSguild $socketID [list CliScriptBro $eventInfo]
+
+set SESSION_STATE DEBUG
+
+# Xscript data comes in the format XscriptMainMsg window message
+# Tags are HDR, SRC, and DST. They are sent when state changes.
+
+while { 1 } {
+
+    if { [eof $socketID] } { puts "ERROR: Lost connection to server."; exit 1 }
+
+    if { [catch {gets $socketID} msg] } {
+
+        puts "ERROR: $msg"
+        exit 1
+
+    }
+  
+    # Strip the command and faux winname from the msg
+    set data [lindex $msg 2]
+
+
+    switch -exact -- $data {
+
+        HDR     { set SESSION_STATE HDR }
+        SRC     { set SESSION_STATE SRC }
+        DST     { set SESSION_STATE DST }
+        DEBUG   { set SESSION_STATE DEBUG }
+        DONE    { break }
+        ERROR   { set SESSION_STATE ERROR }
+        default { puts "${SESSION_STATE}: [lindex $msg 2]" }
+
+    }
+
+    # Exit if agent returns no data after debug
+    if { $SESSION_STATE == "DEBUG" && $data == "" } {
+        break
+    }
+
+}
+
+catch {close $socketID} 
--- securityonion-capme-20121213.orig/capme/.js/capme.js
+++ securityonion-capme-20121213/capme/.js/capme.js
@@ -36,7 +36,7 @@ $(document).ready(function(){
  
     $(".capme_submit").click(function() {
        frmArgs = $('input[value!=""]').length;
-       if (frmArgs == 12) {
+       if (frmArgs == 14) {
             reqCap("usefrm");
         } else {
             theMsg("Please complete all form fields");
@@ -51,6 +51,9 @@ $(document).ready(function(){
             bOFF('.capme_submit');
             theMsg("Sending request..");
 
+            // Transcript
+            var xscript = s2h($('input:radio[name=xscript]:checked').val());
+
             // SID Source
             var sidsrc = s2h($('input:radio[name=sidsrc]:checked').val());
 
@@ -88,7 +91,7 @@ $(document).ready(function(){
             // Continue if no errors
             if (err == 0) {
             
-                var urArgs = "d=" + sip + "-" + spt + "-" + dip + "-" + dpt + "-" + st + "-" + et + "-" + usr + "-" + pwd + "-" + sidsrc;
+                var urArgs = "d=" + sip + "-" + spt + "-" + dip + "-" + dpt + "-" + st + "-" + et + "-" + usr + "-" + pwd + "-" + sidsrc + "-" + xscript;
 
                 $(function(){
                     $.get(".inc/callback.php?" + urArgs, function(data){cbtx(data)});
