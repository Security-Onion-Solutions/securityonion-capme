Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 securityonion-capme (20121213-0ubuntu0securityonion63) trusty; urgency=medium
 .
   * fix Bro transcript to allow both TCP and UDP
Author: Doug Burks <doug.burks@gmail.com>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: http://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- securityonion-capme-20121213.orig/capme/.inc/callback.php
+++ securityonion-capme-20121213/capme/.inc/callback.php
@@ -219,8 +219,6 @@ if ($sidsrc == "elsa") {
 Query the Sguil database.
 If the user selected sancp or event, query those tables and get
 the 3 pieces of data that we need.
-If the user came from Squert, then we'll query the event table
-and look for ip_proto=6 since we only support TCP right now.
 */
 $queries = array(
                  "elsa" => "SELECT sid FROM sensor WHERE hostname='$sensor' AND agent_type='pcap' LIMIT 1",
@@ -262,19 +260,17 @@ if (!$response) {
             // we couldn't find the event using a strict tcp query above, so check to see if it's non-tcp
             $response = mysql_query("select * from event WHERE timestamp BETWEEN '$st' AND '$et' AND 
 					((src_ip = INET_ATON('$sip') AND src_port = $spt AND dst_ip = INET_ATON('$dip') AND 
-					dst_port = $dpt AND ip_proto!=6) OR (src_ip = INET_ATON('$dip') AND 
-					src_port = $dpt AND dst_ip = INET_ATON('$sip') AND dst_port = $spt AND ip_proto!=6));");
+					dst_port = $dpt ) OR (src_ip = INET_ATON('$dip') AND 
+					src_port = $dpt AND dst_ip = INET_ATON('$sip') AND dst_port = $spt ));");
             if (mysql_num_rows($response) == 0) {
                 $errMsg = "Failed to find event in event table.";
             }
     }
-
 	
 } else {
     $row = mysql_fetch_assoc($response);
     // If using ELSA, we already set $st and $sensor above so don't overwrite that here.
     if ($sidsrc != "elsa") {
-        $event_foundtcp=1;
         $st = $row["start_time"];
     	$sensor = $row["hostname"]; 
     }
@@ -287,39 +283,41 @@ if ($err == 1) {
                     "err" => "$errMsg");
 } else {
 
-    // We have all the data we need, so pass the parameters to the correct cliscript.
+    // We passed all error checks, so let's get ready to request the transcript.
+
     $usr     = $_SESSION['sUser'];
     $pwd     = $_SESSION['sPass'];
 
     $time1 = microtime(true);
+
+    // The original cliscript.tcl assumes TCP (proto 6).
     $script = "cliscript.tcl";
+    $proto=6;
+    $cmd = "../.scripts/$script \"$usr\" \"$sensor\" \"$st\" $sid $sip $dip $spt $dpt";
 
-    // We repeat the same query as above, so that we set the UDP flag, where appropriate.
+    // If the request came from Squert, check to see if the event is UDP.
     if ($sidsrc == "event") {
             $response = mysql_query("select * from event WHERE timestamp BETWEEN '$st' AND '$et' AND 
 					((src_ip = INET_ATON('$sip') AND src_port = $spt AND dst_ip = INET_ATON('$dip') AND 
-					dst_port = $dpt AND ip_proto!=6) OR (src_ip = INET_ATON('$dip') AND src_port = $dpt AND 
-					dst_ip = INET_ATON('$sip') AND dst_port = $spt AND ip_proto!=6));"); 
-	   if (mysql_num_rows($response) == 0) {
-		if ($event_foundtcp != "1")
-		$event_foundudp=0;;
-            } else {
-                $event_foundudp=1;
-            }
+					dst_port = $dpt AND ip_proto=17) OR (src_ip = INET_ATON('$dip') AND src_port = $dpt AND 
+					dst_ip = INET_ATON('$sip') AND dst_port = $spt AND ip_proto=17));"); 
+	   if (mysql_num_rows($response) > 0) {
+		$proto=17;
+           }
     }
 
-    // If the request came from ELSA, check to see if the result is UDP.
-    if ($sidsrc == "elsa" && $elsa_response_object["results"][0]["_fields"][7]["value"] != "TCP") {
-        $elsa_foundudp=1;
+    // If the request came from ELSA, check to see if the event is UDP.
+    if ($sidsrc == "elsa" && $elsa_response_object["results"][0]["_fields"][7]["value"] == "UDP") {
+	$proto=17;
     }
-    // Choose the correct cliscripti and set proto/params, based on results of previous queries.
-    if ($xscript == "bro" || $elsa_foundudp == "1" || $event_foundudp == "1") {
+
+    // If the traffic is UDP or the user chose the Bro transcript, change to cliscriptbro.tcl.
+    if ($xscript == "bro" || $proto == "17" ) {
 	$script = "cliscriptbro.tcl";
-	$proto=17;
 	$cmd = "../.scripts/$script \"$usr\" \"$sensor\" \"$st\" $sid $sip $dip $spt $dpt $proto";
-    } else {
-	$cmd = "../.scripts/$script \"$usr\" \"$sensor\" \"$st\" $sid $sip $dip $spt $dpt";
     }
+
+    // Request the transcript.
     $raw = cliscript($cmd, $pwd);
     $time2 = microtime(true);
 
@@ -341,9 +339,8 @@ if ($err == 1) {
     }
     $time3 = microtime(true);
 
-    // If we found gzip encoding, then request Bro transcript.
+    // If we found gzip encoding, then switch to Bro transcript.
     if ($foundgzip==1) {
-	$proto=6;
         $cmd = "../.scripts/cliscriptbro.tcl \"$usr\" \"$sensor\" \"$st\" $sid $sip $dip $spt $dpt $proto";
 	$fmtd .= "<span class=txtext_hdr>CAPME: <b>Detected gzip encoding.</b></span>";
 	$fmtd .= "<span class=txtext_hdr>CAPME: <b>Automatically switched to Bro transcript.</b></span>";
@@ -353,7 +350,7 @@ if ($err == 1) {
     $raw = cliscript($cmd, $pwd);
     $time4 = microtime(true);
 
-    // Initialize $transcriptbytes so we can count the number of bytes in the transcript
+    // Initialize $transcriptbytes so we can count the number of bytes in the transcript.
     $transcriptbytes=0;
 
     // Check for errors and format as necessary.
